Unit@dE#2o24

---

DECLARE @BatchCursor CURSOR;

SET @BatchCursor = CURSOR FAST_FORWARD READ_ONLY FOR

Select 'values pass to batch'	    

OPEN @BatchCursor

FETCH NEXT FROM @BatchCursor INTO @BatchNumber,@OriginalClaimCode,@InvoiceNumber,@USR;--Values we will use with in this cursor

WHILE @@FETCH_STATUS = 0
BEGIN

--Logic Build Here

FETCH NEXT FROM @BatchCursor INTO @BatchNumber,@OriginalClaimCode,@InvoiceNumber,@USR;--Values we will use with in this cursor
END

CLOSE @BatchCursor;
---
Void Invoice allocation 
     --1. Get All the batch for Transaactions for Void
	  --2. start the transaction
	  --3. start cursor for batch
	  --4. get transactions which are ready for void for this batch
	  --5. get parent claim id of this batch
	  --6. get the amount to create a task for parent claim for this batch
	  --7. start cursor for all the transactions ready for void
	  --8. Pass the transaction Id to Void Sp
		--8.1 Void The Transaction
		--8.2 Do not create a task at child claim
		--8.3 Enter history at child
	  -- 7.1 ends curosr for all transaction void for this batch
	  --9. Create history entry at parent claim for this batch
	  --10. Create invoice task at parent claim for this batch
	  --11 Update all transaction for this batch  as voided in the AClaims_InvoiceProcessing table
	  -- 3.1 ends batch cursor
	  --12. commit  the transaction
	  --13. roll back transaction if any error
	  --14. insert the error in devlog
----
Select lk.StatusDesc,* from Aclaims_transactions act 
Join [dbo].[LK_Claim_TranStatus] lk on act.TranStatusCd=lk.TranStatusCd
where act.ccd_claimCode=180147
------------
Select actl.ctt_Description,egpdc_id,ctr_entryId, * from Aclaims_transactions act
join Aclaims_transactionlist actl on act.ctt_id=actl.ctt_id
where act.ctr_covname is null
and ctr_entryId<>15
order by ctr_id desc
--
Select cTT_TransactionType,TranStatusCd ,* from Aclaims_transactions act 
join Aclaims_transactionlist actl on act.ctt_id=actl.ctt_id And cTT_TransactionType='DRR'
--Join [dbo].[LK_Claim_TranStatus] lk on act.TranStatusCd=lk.TranStatusCd --And act.TranStatusCd=4
where cTR_Paid=1
order by cTR_EntryDate DESC




---

Select   distinct a.ccd_claimcode  as ClaimCode, CON.PC_State as MemberState ,A.cCD_LossState as ClaimLossState,sl.cCs_status    as ClaimStatus
    
    ,Mssu.sUsr_firstName +' '+Mssu.susr_lastName as MemberstatePS,Lssu.sUsr_firstName +' '+Lssu.susr_lastName as LossstatePS,
    Cssu.sUsr_firstName +' '+Cssu.susr_lastName as ClaimPS,A.cCD_LossReportDate
    FROM AClaims_ClaimData AS A WITH(NOLOCK)
    LEFT JOIN Policy_Contacts AS CON WITH(NOLOCK)
    ON A.PC_ContactCode = CON.PC_ContactCode
    Join Aclaims_statusList sl  on sl.cCS_ID=a.cCD_StatusID
    left Join System_states lsPS on lsPS.sST_State=A.cCD_LossState And lsPS.sST_PayablesSpecialist=cCD_PayablesSpecialist 
    left Join System_states MsPS on MsPS.sST_State=CON.PC_State --And MsPS.sST_PayablesSpecialist=cCD_PayablesSpecialist
    left Join System_users Mssu on Mssu.susr_id=msps.sST_PayablesSpecialist
    left Join System_users Lssu on Lssu.susr_id=lsps.sST_PayablesSpecialist
    left Join System_users Cssu on Cssu.susr_id=cCD_PayablesSpecialist
    where A.cCD_LossState <> CON.PC_State
    And cCD_PayablesSpecialist is not null
    And MsPS.sST_PayablesSpecialist<>lsPS.sST_PayablesSpecialist
    --and ccd_claimcode=179700
    order by ccd_claimcode desc
-------
  Declare @Assignee int=NULL; 
 Declare @RoleCode int=NULL;
 --get Claim PS
 Set @Assignee=(Select acd.cCD_PayablesSpecialist from dbo.AClaims_ClaimData acd WITH(NOLOCK) 
 JOIN System_users su WITH(NOLOCK)  ON acd.cCD_PayablesSpecialist = su.sUSR_ID And sUSR_Inactive=0 And sUSR_Disabled=0
 where acd.cCD_ID=109581)


 --get member state PS
 if(@Assignee is NULL)
 begin
 Set @Assignee=(

 Select su.sUSR_ID from Policy_contacts pc
  Join System_States ss on ss.sST_State=pc.PC_state
  join Aclaims_claimdata acd on acd.PC_ContactCode=pc.PC_ContactCode
  join System_Users su   ON su.sUSR_ID = ss.sST_PayablesSpecialist  And su.sUSR_Inactive=0 And su.sUSR_Disabled=0
 where acd.cCD_ID=109581
)
 End


 --get Role Code
  if(@Assignee is NULL)
 begin
 Set @RoleCode=(
select sRL_ID from System_Roles B where sRL_Code IN('CLMBILLMGR') and B.sRL_Disabled = 0
)
 End

 Select Case when (@Assignee Is Null) Then NULL Else @Assignee End as UsersId

 Select Case when (@RoleCode Is NUll) Then NULL Else @RoleCode End as RolesID


---

 Select PC_ContactCode, * from Aclaims_claimdata acd where acd.ccd_claimcode=180147
 Select PC_state,* from Policy_contacts where PC_ContactCode=2777
 Select sST_PayablesSpecialist,* from System_States where sST_State='PA'
 Select * from System_Users su where su.sUSR_ID=43875

-------
Select * from AClaims_Transactions act 
join Accounting.EventQueues eq on act.cTR_ID=eq.ClaimsTransactionId 
where act.cCD_ClaimCode in (178451)

Select * from Accounting.DailyTransactions adt where adt.EventQueueId in (
Select eq.EventQueueId from AClaims_Transactions act 
join Accounting.EventQueues eq on act.cTR_ID=eq.ClaimsTransactionId--and eq.IsGpProcessed is null
join AClaims_Coverage ac on ac.cCD_ID=act.cCD_ClaimID and ac.cCOV_Enabled=1 
where act.cCD_ClaimCode in (171850)
)

Select * from Accounting.CodeCoverages ac where ac.sCovId in (
Select distinct ac.sCOV_ID from AClaims_Transactions act 
join Accounting.EventQueues eq on act.cTR_ID=eq.ClaimsTransactionId and eq.IsGpProcessed is null
join AClaims_Coverage ac on ac.cCD_ID=act.cCD_ClaimID and ac.cCOV_Enabled=1 
where act.cCD_ClaimCode in (171850)
)

Update Accounting.EventQueues SET IsGpProcessed=NULL , BatchName=Null,BatchDate=NULL,QueueStatusCodeId=1
where EventQueueId in (
Select eq.EventQueueId from AClaims_Transactions act 
join Accounting.EventQueues eq on act.cTR_ID=eq.ClaimsTransactionId--and eq.IsGpProcessed is null
join AClaims_Coverage ac on ac.cCD_ID=act.cCD_ClaimID and ac.cCOV_Enabled=1 
where act.cCD_ClaimCode in (171850)
)

BEGIN TRAN
--IPL 
IF NOT EXISTS(SELECT 1 FROM Accounting.CodeCoverages with(NOLOCK) WHERE sFrmId=(Select sfrm_id from system_forms with(NOLOCK)where sFRM_FormType='GLX') and sCOVID = (SELECT sCOV_ID FROM System_Coverages sc with(NOLOCK) WHERE sCOV_Code = 'ATBI'  And sFRM_ID=4))
BEGIN
INSERT INTO Accounting.CodeCoverages(
sFrmId, sCovId, Lob, CmOcc, DirectAssumed, CodeSegment4, CodeSegment7, CodeSegment8)
Select (Select sfrm_id from system_forms with(NOLOCK)where sFRM_FormType='GLX'), (SELECT sCOV_ID FROM System_Coverages sc with(NOLOCK) WHERE sCOV_Code = 'ATBI' And sFRM_ID=4),'LPL', 'CM', 'D' ,'01','172','058'
END

COMMIT TRAN

------------
declare @userAllowedToChangeStatus nvarchar(20)=''; --1 - Allow to change , 0- not allowd to change
select @userAllowedToChangeStatus= case when count(*)>0 then 'allow' else 'notallow' end from(
Select distinct case when sRL_RoleName in ('Resolutions Admin','Payable Specialist') and sRL_Code in ('RSLNADMIN','PayableSpecialist') Then 1 else 0 end as nothaveSAGrole from System_Users su WITH(NOLOCK)
Join System_UserRoles sur WITH(NOLOCK) on sur.sUSR_ID=su.sUSR_ID and sUSRL_Active=1
Join System_Roles sr WITH(NOLOCK) on sr.sRL_ID=sur.sRL_ID
where su.sUSR_ID=:USR) as rolesInfo Where rolesInfo.nothaveSAGrole=1
Select  @userAllowedToChangeStatus as uRights
---------
Select * from system_users where sUSR_EmailAddress in ('lolariu@ue.org','cwallace@ue.org','tcumbo@ue.org','pbuchanan@ue.org','donley@ue.org','khance@ue.org','ahodge@ue.org',
'mkrackov@ue.org')

Select sr.sRL_RoleName from system_users su 

join [dbo].[System_UserRoles] sur on sur.sUSR_ID=su.SUSR_ID
Join [dbo].[System_Roles] SR on sr.sRL_ID=sur.SRL_ID
where sUSR_EmailAddress in (--'lolariu@ue.org','cwallace@ue.org','tcumbo@ue.org','pbuchanan@ue.org','donley@ue.org',
'khance@ue.org'
--,'ahodge@ue.org',
--'mkrackov@ue.org'
)

--------------
Declare @ccd_climID int=14168;
Declare @CreateWorkFLow int=0;


if(((SELECT SUM(ISNULL(cr.Debit_Amount-cr.Credit_Amount,0))
	FROM dbo.Claims_Reserves cr
	WHERE cr.Claim_ID = @ccd_climID AND cr.Status = 'Approved')>=100) And ((SELECT SUM(ISNULL(cr.Debit_Amount-cr.Credit_Amount,0))
	FROM dbo.Claims_Reserves cr
	WHERE cr.Claim_ID = @ccd_climID AND cr.Status = 'Approved')<=5000000) )
	Begin
INSERT INTO HWorkflow_Notes 
(HWFP_ID,
hWF_AssignedFrom
,hWF_AssignedDate
,hWF_Create_Date
,hWF_Due_Date
,hWF_Title
,sRL_ID
,hWF_Status
,hWFC_ID
,hWF_Notes
,cCD_ID
,hWF_Link_Target
,hWF_Link_ToolTip
)

VALUES 
((select HWFP_ID from HWorkflow_Priorities WITH(NOLOCK)
where HWFP_Name = 'High')
,(Select sUSR_ID from System_users where sUSR_LoginName='SYSTEM')
,GETDATE()
,GETDATE()
,GETDATE()
,(Select ' Reserve Approved by Claims VP.')
,(SELECT sRL_ID
  FROM System_Roles with(nolock)
  Where sRL_Code = 'CEOCFO')
,1
,(select hWFC_ID from hWorkFlow_Category with(nolock)
 where hWFC_Category = 'Claims')
,'Reserve Approved by Claims VP'
,(Select @ccd_climID)
,(Select 'Communication.LinkRequest(''claiminfo_Financial.max?CLMID='+convert(varchar,@ccd_climID)+''')')
,'Review Claim Financials.' 
)
SELECT @CreateWorkFLow = SCOPE_IDENTITY();


INSERT INTO hWorkflow_NotesData 
(hWF_ID
,hWFND_DataType
,hWFND_DataValue
,wWFND_EntryDate
,wWFND_EntryUserID
)
VALUES 
(@CreateWorkFLow
,'GENLINK'
,@CreateWorkFLow
,GETDATE()
,(Select sUSR_ID from System_users where sUSR_LoginName='SYSTEM')
)



End

